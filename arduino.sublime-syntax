%YAML 1.2
#############################################################################
# Arduino syntax for sublime text
#
# This syntax file is modified based on C-syntax
# By sakamitz@ZJU, Friday, December 28 2018, 22:47
#############################################################################
---
name: Arduino
file_extensions:
  - ino
scope: source.arduino

variables:
  identifier: \b[[:alpha:]_][[:alnum:]_]*\b # upper and lowercase
  macro_identifier: \b[[:upper:]_][[:upper:][:digit:]_]{2,}\b # only uppercase, at least 3 chars
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|return|switch|while'
  basic_types: 'auto|bool|_Bool|char|word|String|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum'
  storage_classes: 'static|extern|register'
  type_qualifier: 'const|volatile'
  compiler_directive: 'inline'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_func_keywords: 'if|for|switch|while|sizeof'

contexts:
  main:
    - include: preprocessor-global
    - include: global

  #############################################################################
  # Reusable contexts
  #
  # The follow contexts are currently constructed to be reused in the C++
  # syntax. They are specifically constructed to not push into sub-contexts,
  # which ensures that C++ code isn't accidentally lexed as plain C. They also
  # should not use the {{identifier}} variable since that is different for C++.
  #############################################################################

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.arduino
      captures:
        1: meta.toc-list.banner.block.arduino
    - match: /\*
      scope: punctuation.definition.comment.arduino
      push:
        - meta_scope: comment.block.arduino
        - match: \*/
          scope: punctuation.definition.comment.arduino
          pop: true
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.arduino
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.arduino
      captures:
        1: meta.toc-list.banner.line.arduino
    - match: //
      scope: punctuation.definition.comment.arduino
      push:
        - meta_scope: comment.line.double-slash.arduino
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.arduino
        - match: \n
          pop: true

  strings:
    - match: '(L|u8|u|U)?(")'
      captures:
        1: storage.type.string.arduino
        2: punctuation.definition.string.begin.arduino
      push:
        - meta_scope: string.quoted.double.arduino
        - match: '"'
          scope: punctuation.definition.string.end.arduino
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "(L|u8|u|U)?(')"
      captures:
        1: storage.type.string.arduino
        2: punctuation.definition.string.begin.arduino
      push:
        - meta_scope: string.quoted.single.arduino
        - match: "'"
          scope: punctuation.definition.string.end.arduino
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.arduino
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.arduino
    - match: \\.
      scope: invalid.illegal.unknown-escape.arduino

  string_placeholder:
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          [,;:_]?                                       # separator character (AltiVec)
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.arduino

  keywords:
    - match: \b({{control_keywords}})\b
      scope: keyword.control.arduino
    - match: \bsizeof|\b
      scope: keyword.operator.word.arduino

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.arduino

  variables:
    - match: '\bg[A-Z]\w*\b'
      scope: variable.other.readwrite.global.mac-classic.arduino
    - match: '\bs[A-Z]\w*\b'
      scope: variable.other.readwrite.static.mac-classic.arduino

  constants:
    - match: \b(NULL|true|false|HIGH|LOW|INPUT|OUTPUT|LED_BUILTIN)\b
      scope: constant.language.arduino

  types:
        - match: \b({{basic_types}}|{{before_tag}})\b
          scope: storage.type.arduino

  numbers:
    - match: '\b((0(x|X)[0-9a-fA-F]*(\.[0-9a-fA-F]+p-?\d+)?)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([fF]|(l{1,2}|L{1,2})[uU]?|[uU](l{0,2}|L{0,2}))?\b'
      scope: constant.numeric.arduino

  operators:
    - match: \b(digitalRead|digitalWrite|pinMode|analogRead|analogReference|analogWrite|analogReadResolution|analogWriteResolution|noTone|pulseIn|pulseInLong|shiftIn|shiftOut|tone|delay|delayMicroseconds|micros|millis|abs|constrain|map|max|min|pow|sq|sqrt|cos|sin|tan|isAlpha|isAlphaNumeric|isAscii|isControl|isDigit|isGraph|isHexadecimalDigit|isLowerCase|isPrintable|isPunct|isSpace|isUpperCase|isWhitespace|random|randomSeed|bit|bitClear|bitRead|bitSet|bitWrite|highByte|lowByte|attachInterrupt|detachInterrupt|Interrupts|interrupts|noInterrupts|Serial|stream|Keyboard|Mouse)\b
      scope: keyword.operator.function.arduino
    - match: '->'
      scope: punctuation.accessor.arduino
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.arduino
    - match: <<|>>|&&|\|\|
      scope: keyword.operator.arithmetic.arduino
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.arduino
    - match: \+|\-|/|%|\||\^|~|!
      scope: keyword.operator.arithmetic.arduino
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.arduino
    - match: \=
      scope: keyword.operator.assignment.arduino
    # Negative lookahead prevents match :: when included in C++
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.arduino
    - match: '\.\.\.'
      scope: keyword.operator.variadic.arduino

  access-illegal:
    - match: \.\.(?!\.)
      scope: invalid.illegal.syntax.arduino

  access:
    - match: '(\.)({{identifier}})(?!\s*\()'
      captures:
        1: punctuation.accessor.arduino
        2: variable.other.member.arduino
    - include: access-illegal
    - match: \.(?!\.)
      scope: punctuation.accessor.arduino

  label:
    - match: '^\s*((?!default){{identifier}})(:)(?!:)'
      captures:
        1: entity.name.label.arduino
        2: punctuation.separator.arduino

  preprocessor-disabled:
    - match: ^\s*(#\s*if(n?def)?)\b
      captures:
        1: meta.preprocessor.arduino
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.arduino
          pop: true
        - include: preprocessor-disabled
        - include: pragma-mark
    - include: pragma-mark

  preprocessor-line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.arduino
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.arduino

  preprocessor-line-ending:
    - match: $\n
      pop: true

  # Comment handling in preprocessor directives are complicated by the fact
  # that a single-line comment will normally consume the newline to prevent
  # completions from being presented to the user. Additionally, a multi-line
  # comment without a line continuation ends at the newline.
  preprocessor-comments:
    - match: /\*
      scope: punctuation.definition.comment.arduino
      push:
        - meta_scope: comment.block.arduino
        - match: '\\$\n'
          scope: punctuation.separator.continuation.arduino
        - match: \*/
          scope: punctuation.definition.comment.arduino
          pop: true
    - match: //
      scope: punctuation.definition.comment.arduino
      push:
        - meta_scope: comment.line.double-slash.arduino
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.arduino
          pop: true
        - match: (?=\n)
          pop: true

  pragma-mark:
    - match: ^\s*((#\s*pragma\s+mark)\s+(.*))
      scope: meta.section.arduino
      captures:
        1: meta.preprocessor.arduino
        2: keyword.control.import.pragma.arduino
        3: meta.toc-list.pragma-mark.arduino

  # Used by "inc" snippets to prevent double ##include
  incomplete-inc:
    - match: '^\s*(#i(nc?)?)\b\s*'
      scope: meta.preprocessor.incomplete.arduino

  #############################################################################
  # The following are C-specific scopes that should not be reused. This is
  # because they push into subcontexts and use variables that are C-specific.
  #############################################################################

  global:
    - include: early-expressions
    - match: '^\s*(?=\w+)'
      push: global-modifier
    - include: late-expressions

  statements:
    - include: preprocessor-statements
    - include: label
    - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: case-default
    - include: access
    - include: typedef
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: operators
    - include: strings
    - include: parens
    - include: brackets
    - include: block
    - include: variables
    - include: constants
    - match: ','
      scope: punctuation.separator.arduino
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.arduino

  late-expressions:
    - include: modifiers-parens
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.arduino

  ## C-specific contexts

  global-modifier:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    - match: '(?=\S)'
      set: global-type

  global-type:
    - include: comments
    - match: \*
      scope: keyword.operator.arduino
    # If a struct/union/enum followed by a name that is not a macro or declspec
    # then this is likely a return type of a function. This is uncommon.
    - match: |-
        (?x:
          ({{before_tag}})
          \s+
          (?=
            (?![[:upper:][:digit:]_]+\b)
            {{identifier}}
            (\s+{{identifier}}(?!\s*[{=;])|\s*\*+)
          )
        )
      captures:
        1: storage.type.arduino
      set: global-maybe-function
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/union
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{control_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: global-maybe-function
    # Allow a macro call
    - match: '({{identifier}})\s*(\()(?=[^\)]+\))'
      captures:
        1: variable.function.arduino
        2: meta.group.arduino punctuation.section.group.begin.arduino
      push:
        - meta_scope: meta.function-call.arduino
        - meta_content_scope: meta.group.arduino
        - match: '\)'
          scope: meta.group.arduino punctuation.section.group.end.arduino
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set:
        - include: function-call
        - match: ''
          pop: true
    - include: types
    - match: '{{identifier}}'
    - match: (?=\W)
      pop: true

  global-maybe-function:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - match: \*
      scope: keyword.operator.arduino
    - include: types
    - include: modifiers-parens
    - include: modifiers
    # All uppercase identifier just before a newline is most likely a macro
    - match: '[[:upper:][:digit:]_]+\s*$'
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|$))(?=\s+)'
    # Real function definition
    - match: '{{identifier}}(?=\s*(\(|$))'
      scope: meta.function.arduino entity.name.function.arduino
      set: function-definition-params
    - match: '(?=\S)'
      pop: true

  function-definition-params:
    - meta_content_scope: meta.function.arduino
    - include: comments
    - match: '(?=\()'
      set:
        - match: \(
          scope: meta.function.parameters.arduino meta.group.arduino punctuation.section.group.begin.arduino
          set:
            - meta_content_scope: meta.function.parameters.arduino meta.group.arduino
            - match : \)
              scope: punctuation.section.group.end.arduino
              set: function-definition-continue
            - match: '\bvoid\b'
              scope: storage.type.arduino
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.arduino
            - include: expressions
            - include: preprocessor-line-continuation
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.arduino
    - include: comments
    - match: '(?=;)'
      pop: true
    - match: \b(const|final|noexcept|override)\b
      scope: storage.modifier.arduino
    - match: '(?=\{)'
      set: function-definition-body
    - match: '(?=\S)'
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.arduino
    - match: '\{'
      scope: meta.block.arduino punctuation.section.block.begin.arduino
      set:
        - meta_content_scope: meta.function.arduino meta.block.arduino
        - match: '\}'
          scope: meta.function.arduino meta.block.arduino punctuation.section.block.end.arduino
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '(?=({{before_tag}})([^(;]+$|.*\{))'
          push: data-structures
        - include: statements

  data-structures:
    # Detect variable type definitions using struct/enum/union followed by a tag
    - match: '\b({{before_tag}})(?=\s+{{identifier}}\s+{{identifier}}\s*[=;\[])'
      scope: storage.type.arduino
    - match: '\bstruct\b'
      scope: storage.type.arduino
      set: data-structures-struct-definition
    - match: '\benum\b'
      scope: storage.type.arduino
      set: data-structures-enum-definition
    - match: '\bunion\b'
      scope: storage.type.arduino
      set: data-structures-union-definition
    - match: '(?=\S)'
      pop: true

  data-structures-struct-definition:
    - meta_scope: meta.struct.arduino
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.struct.forward-decl.arduino
    - match: '{{identifier}}'
      scope: entity.name.struct.arduino
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.arduino punctuation.section.block.begin.arduino
      set:
        - meta_content_scope: meta.struct.arduino meta.block.arduino
        - match: '\}'
          scope: meta.struct.arduino meta.block.arduino punctuation.section.block.end.arduino
          pop: true
        - include: data-structures-body

  data-structures-enum-definition:
    - meta_scope: meta.enum.arduino
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.enum.forward-decl.arduino
    - match: '{{identifier}}'
      scope: entity.name.enum.arduino
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.arduino punctuation.section.block.begin.arduino
      set:
        - meta_content_scope: meta.enum.arduino meta.block.arduino
        # Enums don't support methods so we have a simplified body
        - match: '\}'
          scope: meta.enum.arduino meta.block.arduino punctuation.section.block.end.arduino
          pop: true
        - include: data-structures-body

  data-structures-union-definition:
    - meta_scope: meta.union.arduino
    - include: data-structures-definition-common-begin
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.union.forward-decl.arduino
    - match: '{{identifier}}'
      scope: entity.name.union.arduino
    - match: '(?=;)'
      pop: true
    - match: '\{'
      scope: meta.block.arduino punctuation.section.block.begin.arduino
      set:
        - meta_content_scope: meta.union.arduino meta.block.arduino
        - match: '\}'
          scope: meta.union.arduino meta.block.arduino punctuation.section.block.end.arduino
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - match: '(?=\b(?:{{before_tag}}|{{control_keywords}})\b)'
      pop: true
    - include: modifiers-parens
    - include: modifiers
    # Handle macros so they aren't matched as the class name
    - match: '\b[[:upper:][:digit:]_]+\b'

  data-structures-definition-common-end:
    - match: '(?=;)'
      pop: true

  data-structures-body:
    - include: preprocessor-data-structures
    - match: '(?={{before_tag}})'
      push: data-structures
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.arduino
      push:
        - meta_scope: meta.block.arduino
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.arduino
          pop: true
        - include: statements

  parens:
    - match: \(
      scope: punctuation.section.group.begin.arduino
      push:
        - meta_scope: meta.group.arduino
        - match: \)
          scope: punctuation.section.group.end.arduino
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.arduino
      push:
        - meta_scope: meta.brackets.arduino
        - match: \]
          scope: punctuation.section.brackets.end.arduino
          pop: true
        - include: expressions

  case-default:
    - match: '\b(default|case)\b'
      scope: keyword.control.arduino
      push:
        - match: ':'
          scope: punctuation.separator.arduino
          pop: true
        - include: expressions

  keywords-parens:
    - match: '\b(sizeof)\b\s*(\()'
      captures:
        1: keyword.operator.word.arduino
        2: meta.group.arduino punctuation.section.group.begin.arduino
      push:
        - meta_content_scope: meta.group.arduino
        - match: '\)'
          scope: meta.group.arduino punctuation.section.group.end.arduino
          pop: true
        - include: expressions

  typedef:
    - match: \btypedef\b
      scope: storage.type.arduino
      push:
        - match: ({{identifier}})?\s*(?=;)
          captures:
            1: entity.name.type.typedef.arduino
          pop: true
        - match: \b(struct)\s+({{identifier}})
          captures:
            1: storage.type.arduino
        - include: expressions

  function-call:
    - match: (?={{identifier}}\s*\()
      push:
        - meta_content_scope: meta.function-call.arduino
        - include: c99
        - match: '{{identifier}}'
          scope: variable.function.arduino
        - match: '\('
          scope: meta.group.arduino punctuation.section.group.begin.arduino
          set:
            - meta_content_scope: meta.function-call.arduino meta.group.arduino
            - match : \)
              scope: meta.function-call.arduino meta.group.arduino punctuation.section.group.end.arduino
              pop: true
            - include: expressions

  ## Preprocessor for data-structures

  preprocessor-data-structures:
    - include: preprocessor-rule-enabled-data-structures
    - include: preprocessor-rule-disabled-data-structures

  preprocessor-rule-disabled-data-structures:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.arduino
        2: keyword.control.import.arduino
        3: constant.numeric.preprocessor.arduino
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.arduino
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.else.arduino
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: data-structures-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.arduino
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-data-structures:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.arduino
        2: keyword.control.import.arduino
        3: constant.numeric.preprocessor.arduino
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.arduino
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.else.arduino
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.arduino
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: data-structures-body

  ## Preprocessor for global

  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-expressions:
    - include: incomplete-inc
    - include: preprocessor-macro-define
    - include: pragma-mark
    - include: preprocessor-other

  preprocessor-rule-disabled-global:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.arduino
        2: keyword.control.import.arduino
        3: constant.numeric.preprocessor.arduino
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.arduino
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.else.arduino
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.arduino
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-global:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.arduino
        2: keyword.control.import.arduino
        3: constant.numeric.preprocessor.arduino
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.arduino
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.else.arduino
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.arduino
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global

  preprocessor-rule-other-global:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.arduino
      push:
        - meta_scope: meta.preprocessor.arduino
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.arduino
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \{
      scope: punctuation.section.block.begin.arduino
      set: preprocessor-block-if-branch-global
    - include: preprocessor-global
    - include: negated-block
    - include: global

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.arduino
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \}
      scope: punctuation.section.block.end.arduino
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.arduino
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
      set: preprocessor-block-finish-if-branch-global
    - match: \}
      scope: punctuation.section.block.end.arduino
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
      pop: true
    - match: \}
      scope: punctuation.section.block.end.arduino
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: preprocessor-global
    - include: global

  ## Preprocessor for statements

  preprocessor-rule-disabled-statements:
    - match: ^\s*((#if)\s+(0))\b
      captures:
        1: meta.preprocessor.arduino
        2: keyword.control.import.arduino
        3: constant.numeric.preprocessor.arduino
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.arduino
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.else.arduino
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.arduino
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-statements:
    - match: ^\s*((#if)\s+(0*1))\b
      captures:
        1: meta.preprocessor.arduino
        2: keyword.control.import.arduino
        3: constant.numeric.preprocessor.arduino
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.arduino
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.arduino keyword.control.import.else.arduino
          push:
            - meta_content_scope: comment.block.preprocessor.else-branch.arduino
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-disabled
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-other-statements:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.arduino
      push:
        - meta_scope: meta.preprocessor.arduino
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.arduino
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \{
      scope: punctuation.section.block.begin.arduino
      set: preprocessor-block-if-branch-statements
    - match: (?=(?!{{non_func_keywords}}){{identifier}}\s*\()
      set: preprocessor-if-branch-function-call
    - include: negated-block
    - include: statements

  preprocessor-if-branch-function-call:
    - meta_content_scope: meta.function-call.arduino
    - include: c99
    - match: '{{identifier}}'
      scope: variable.function.arduino
    - match: '\('
      scope: meta.group.arduino punctuation.section.group.begin.arduino
      set: preprocessor-if-branch-function-call-arguments

  preprocessor-if-branch-function-call-arguments:
    - meta_content_scope: meta.function-call.arduino meta.group.arduino
    - match : \)
      scope: meta.function-call.arduino meta.group.arduino punctuation.section.group.end.arduino
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*(?:elif|else))\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
      set: preprocessor-if-branch-function-call-arguments-finish
    - include: expressions

  preprocessor-if-branch-function-call-arguments-finish:
    - meta_content_scope: meta.function-call.arduino meta.group.arduino
    - match: \)
      scope: meta.function-call.arduino meta.group.arduino punctuation.section.group.end.arduino
      pop: true
    - include: expressions

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.arduino
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \}
      scope: punctuation.section.block.end.arduino
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.arduino
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
      set: preprocessor-block-finish-if-branch-statements
    - match: \}
      scope: punctuation.section.block.end.arduino
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
      pop: true
    - match: \}
      scope: punctuation.section.block.end.arduino
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: statements

  ## Preprocessor other

  negated-block:
    - match: '\}'
      scope: punctuation.section.block.end.arduino
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.arduino
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  preprocessor-macro-define:
    - match: ^\s*(#\s*define)\b
      captures:
        1: meta.preprocessor.macro.arduino keyword.control.import.define.arduino
      push:
        - meta_content_scope: meta.preprocessor.macro.arduino
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '({{identifier}})(?=\()'
          scope: entity.name.function.preprocessor.arduino
          set:
            - match: '\('
              scope: punctuation.section.group.begin.arduino
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.arduino
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.arduino meta.group.arduino
    - match: '{{identifier}}'
      scope: variable.parameter.arduino
    - match: \)
      scope: punctuation.section.group.end.arduino
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.arduino
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.arduino
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '\.\.\.'
          scope: keyword.operator.variadic.arduino
        - match: '(?=\))'
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.arduino
          captures:
            1: punctuation.definition.comment.arduino
            2: punctuation.definition.comment.arduino
        - match: '\S+'
          scope: invalid.illegal.unexpected-character.arduino
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: '\.\.\.'
      scope: keyword.operator.variadic.arduino
    - match: (/\*).*(\*/)
      scope: comment.block.arduino
      captures:
        1: punctuation.definition.comment.arduino
        2: punctuation.definition.comment.arduino
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.arduino

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.arduino
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    # Don't define blocks in define statements
    - match: '\{'
      scope: punctuation.section.block.begin.arduino
    - match: '\}'
      scope: punctuation.section.block.end.arduino
    - include: expressions

  preprocessor-practical-workarounds:
    - include: preprocessor-convention-ignore-uppercase-ident-lines
    - include: preprocessor-convention-ignore-uppercase-calls-without-semicolon

  preprocessor-convention-ignore-uppercase-ident-lines:
    - match: ^(\s*{{macro_identifier}})+\s*$
      scope: meta.assumed-macro.arduino

  preprocessor-convention-ignore-uppercase-calls-without-semicolon:
    - match: ^\s*({{macro_identifier}})\s*(\()(?=[^)]*\)\s*$)
      captures:
        1: variable.function.assumed-macro.arduino
        2: punctuation.section.group.begin.arduino
      push:
        - meta_scope: meta.assumed-macro.arduino
        - match: \)
          scope: punctuation.section.group.end.arduino
          pop: true
        - include: expressions

  preprocessor-other:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|line|pragma|undef))\b
      captures:
        1: keyword.control.import.arduino
      push:
        - meta_scope: meta.preprocessor.arduino
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.arduino
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.arduino keyword.control.import.arduino
    - match: ^\s*(#\s*(?:error|warning))\b
      captures:
        1: keyword.control.import.error.arduino
      push:
        - meta_scope: meta.preprocessor.diagnostic.arduino
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - include: strings
        - match: '\S+'
          scope: string.unquoted.arduino
    - match: ^\s*(#\s*(?:include|include_next|import))\b
      captures:
        1: keyword.control.import.include.arduino
      push:
        - meta_scope: meta.preprocessor.include.arduino
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '"'
          scope: punctuation.definition.string.begin.arduino
          push:
            - meta_scope: string.quoted.double.include.arduino
            - match: '"'
              scope: punctuation.definition.string.end.arduino
              pop: true
        - match: <
          scope: punctuation.definition.string.begin.arduino
          push:
            - meta_scope: string.quoted.other.lt-gt.include.arduino
            - match: ">"
              scope: punctuation.definition.string.end.arduino
              pop: true
    - include: preprocessor-practical-workarounds
